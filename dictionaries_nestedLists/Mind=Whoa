#Learning and working with dictionaries:

# You have access to a database of student_scores in the format of a dictionary. The keys in student_scores are the names of the students and the values are their exam scores. 
# Write a program that converts their scores to grades.
# By the end of your program, you should have a new dictionary called student_grades that should contain student names as keys and their assessed grades for values. 
# The final version of the student_grades dictionary will be checked. 
# **DO NOT** modify lines 1-7 to change the existing student_scores dictionary. 

# This is the scoring criteria: 
# - Scores 91 - 100: Grade = "Outstanding" 
# - Scores 81 - 90: Grade = "Exceeds Expectations" 
# - Scores 71 - 80: Grade = "Acceptable" 
# - Scores 70 or lower: Grade = "Fail" 

student_scores = {
    'Harry': 88,
    'Ron': 78,
    'Hermione': 95,
    'Draco': 75,
    'Neville': 60
}

##### My code below

student_grades = student_scores

for grade in student_scores:
    
    if student_grades[grade] > 91 < 100:
        student_grades[grade] = "Outstanding"
        
    elif student_grades[grade] > 81 < 90:
        student_grades[grade] = "Exceeds Expectations"
        
    elif student_grades[grade] > 71 < 80:
        student_grades[grade] = "Acceptable"
        
    elif student_grades[grade] <= 70:
        student_grades[grade] = "Fail"


##### Professor code

# Create an empty dictionary to collect the new values.
student_grades = {}
 
# Loop through each key in the student_scores dictionary
for student in student_scores:
 
    #Get the value (student score) by using the key each time.
    score = student_scores[student]
 
    #Check what grade the score would get, then add it to student_grades
    if score >= 91:
        student_grades[student] = 'Outstanding'
    elif score >= 81:
        student_grades[student] = 'Exceeds Expectations'
    elif score >= 71:
        student_grades[student] = 'Acceptable'
    else:
        student_grades[student] = 'Fail'

# Looks like the professor just used a variable (score) to do the comparison. Eh, my solution still worked. I think it doesn't matter either way. Idk which one would be more efficient. I haven't looked it up or anything, but I wonder if the map() function would work here, if so it's likely the cleanest looking and most efficient.

# Dictionaries can be nested with lists and other iterables.

capitals = {
    "france": "paris",
    "germany": "berlin",
}

#nested lists

travel_log = {
    "France": ["Paris", "Lille", "Dijon"],
    "Germany": ["Stuttgart", "Berlin"],
}

print(travel_log["France"][1])
print(travel_log["Germany"][1])

nested_list = ["A" , "B", ["C" , "D"]]

print(nested_list[2][1])

travel_log = {
  "France": {
    "cities_visited": ["Paris", "Lille", "Dijon"],
    "total_visits": 12
   },
  "Germany": {
    "cities_visited": ["Berlin", "Hamburg", "Stuttgart"],
    "total_visits": 5
   },
}


print(travel_log["Germany"]["cities_visited"][2])

